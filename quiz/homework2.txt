1.
class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        if head==None:
            return head
        dummy = ListNode(0)
        dummy.next = head
        ans = dummy
        pre = dummy
        nex = dummy.next
        while nex!=None:
            if nex.val==val:
                nex = nex.next
                pre.next = nex
                if nex==None:
                    break
            else:
                pre = pre.next
                nex = nex.next
        return ans.next

2.
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        carry = 0
        node1 = l1
        node2 = l2
        dummy = ListNode(0)
        ans = dummy
        while node1!=None or node2!=None:
            if node1==None:
                tmp = carry+node2.val
                carry = 1 if tmp>9 else 0
                dummy.next = ListNode(tmp%10)
                node2 = node2.next
            elif node2==None:
                tmp = carry+node1.val
                carry = 1 if tmp>9 else 0
                dummy.next = ListNode(tmp%10)
                node1 = node1.next
            else:
                tmp = carry+node1.val+node2.val
                carry = 1 if tmp>9 else 0
                dummy.next = ListNode(tmp%10)
                node2 = node2.next
                node1 = node1.next
            dummy = dummy.next
        if carry==1:
            dummy.next = ListNode(1)
        return ans.next

3.
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if head==None or head.next==None:
            return head
        start = head
        ans = head
        l = 0
        while start!=None:
            start=start.next
            l+=1
        start = head
        k = k%l
        while k!=0:
            k-=1
            ans = self.rotate(start)
            start = ans
        return ans
    
    def rotate(self, head):
        if head==None or head.next==None:
            return head
        node = head.next
        pre = head
        while node.next!=None:
            pre = pre.next
            node = node.next
        node.next = head
        pre.next = None
        return node

4.
class Solution:
    def oddEvenList(self, head: ListNode) -> ListNode:
        list1 = []
        list2 = []
        node = head
        i = 1
        while node!=None:
            tmp = node.val
            if i%2!=0:
                list1.append(tmp)
            else:
                list2.append(tmp)
            node = node.next
            i+=1
        ans = ListNode(0)
        node = ans
        list1 = list1+list2
        for v in list1:
            node.next = ListNode(v)
            node = node.next
        return ans.next

5.
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if head==None:
            return head
        dic = {}
        cur = head
        while cur!=None:
            dic[cur] = Node(cur.val)
            cur = cur.next
        cur = head
        while cur!=None:
            if cur.next!=None:
                dic[cur].next = dic[cur.next]
            if cur.random!=None:
                dic[cur].random = dic[cur.random]
            cur = cur.next
        return dic[head]
